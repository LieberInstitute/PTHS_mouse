
R version 3.3.1 Patched (2016-09-30 r71426) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ### Pten mouse differential expression analysis 
> # qsub -V -l mf=10G,h_vmem=15G,h_stack=256M -cwd -b y R CMD BATCH analyze_pten.R
> cleaningY = function(y, mod, P=ncol(mod)) {
+   Hat=solve(t(mod)%*%mod)%*%t(mod)
+   beta=(Hat%*%t(y))
+   cleany=y-t(as.matrix(mod[,-c(1:P)])%*%beta[-c(1:P),])
+   return(cleany)
+ }
> 
> library(limma)
> library(sva)
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-15. For overview type 'help("mgcv-package")'.
Loading required package: genefilter
> library(ggplot2)
> library(jaffelab)
> library(WriteXLS)
> 
> dir = "/dcl01/lieber/ajaffe/Brady/mouseRNAseq/TilotPTEN"
> 
> ##############################################
> # load phenotype data and RPKM expression data
> load('./rdas/pheno.rda',envir = dat<-new.env())
> load('/dcl01/lieber/ajaffe/Brady/mouseRNAseq/TilotPTEN/rpkmCounts_pten_OCT20_n18.rda')
> pd = cbind(dat$pd,pd) #combine gene count data with experimental conditions
> all.equal(pd$FileID,pd$SAMPLE_ID) #samples line up
[1] TRUE
> 
> geneMap$coord = paste0(geneMap$Chr, ":", geneMap$Start , "-", geneMap$End)
> exonMap$coord = paste0(exonMap$Chr, ":", exonMap$Start, "-", exonMap$End)
> 
> ## expressed genes and exons
> meanGeneExprs = rowMeans(geneRpkm)
> meanExonExprs = rowMeans(exonRpkm)
> meanJxnExprs = rowMeans(jRpkm)
> 
> rpkmCuts = c(0,0.1,0.2,0.5,1,2,5,10,50)
> names(rpkmCuts) = paste0("RPKM > ", rpkmCuts)
> numGeneExprs = sapply(rpkmCuts, function(x) sum(meanGeneExprs > x))
> numGeneExprs
  RPKM > 0 RPKM > 0.1 RPKM > 0.2 RPKM > 0.5   RPKM > 1   RPKM > 2   RPKM > 5 
     35895      20803      18466      15075      12559       9733       5388 
 RPKM > 10  RPKM > 50 
      2668        319 
> numExonExprs = sapply(rpkmCuts, function(x) sum(meanExonExprs > x))
> numGeneByExonExprs = sapply(rpkmCuts, function(x)
+   length(unique(exonMap$Geneid[meanExonExprs > x])))
> numJxnExprs = sapply(rpkmCuts, function(x) sum(meanJxnExprs > x))
> numJxnExprs
  RPKM > 0 RPKM > 0.1 RPKM > 0.2 RPKM > 0.5   RPKM > 1   RPKM > 2   RPKM > 5 
   1765063     281480     224023     175370     150133     129507     100300 
 RPKM > 10  RPKM > 50 
     71734      13151 
> 
> table(jMap$code[meanJxnExprs > 0.2])
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:limma’:

    plotMA

The following objects are masked from ‘package:stats’:

    IQR, mad, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colnames, do.call,
    duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect,
    is.unsorted, lapply, lengths, Map, mapply, match, mget, order,
    paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind,
    Reduce, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:base’:

    colMeans, colSums, expand.grid, rowMeans, rowSums

Loading required package: IRanges

Attaching package: ‘IRanges’

The following object is masked from ‘package:nlme’:

    collapse

Loading required package: GenomeInfoDb

AltStartEnd    ExonSkip       InEns       Novel 
      23187        6390      162382       32064 
> 
> ##############################
> # filter expression levels ###
> # gene
> gIndex = which(rowMeans(geneRpkm) > 0.1)
> geneRpkm = geneRpkm[gIndex,]
> geneMap = geneMap[gIndex,]
> 
> # exon
> eIndex = which(rowMeans(exonRpkm) > 0.1)
> exonRpkm = exonRpkm[eIndex,]
> exonMap = exonMap[eIndex,]
> 
> # junction
> jIndex=which(rowMeans(jRpkm) > 1 & jMap$code != "Novel")
> jRpkm = jRpkm[jIndex,]
> jMap = jMap[jIndex]
Loading required package: Biostrings
Loading required package: XVector
> 
> dim(geneRpkm) ; dim(exonRpkm) ; dim(jRpkm)
[1] 20803    18
[1] 298889     18
[1] 142836     18
> 
> ######################
> # hierarchal clustering
> yGene = log2(geneRpkm+1)
> hc = hclust(dist(t(yGene)))
> plot(hc)
> 
> #############################
> # Exploratory analysis
> yGene = log2(geneRpkm+1)
> pcaGene = prcomp(t(yGene))
> 
> plot(pcaGene$x, pch=21,bg=as.numeric(pd$Age),main = "Gene expression PCA", cex.lab = 1.25)
> legend("right", legend = levels(pd$Age),pch =21, pt.bg = 1:3,cex= 1.25)
> 
> plot(pcaGene$x, pch=21,bg=as.numeric(pd$Genotype),main = "Gene expression PCA", cex.lab = 1.25)
> legend("right", legend = levels(pd$Genotype),pch =21, pt.bg = 1:3,cex= 1.25)
> 
> plot(pcaGene$x[,3]~pd$totalAssignedGene,bg=as.numeric(pd$Age), pch=21,
+      xlab = "Gene Assignment Rate", ylab = "PC2",
+      main = "PC2 v. Gene Assignment Rate", cex.lab = 1.25)
> legend("bottomright", legend = levels(pd$Age),pch =21, pt.bg = 1:3,cex= 1.25)
> 
> ###################
> # statistical model
> # adjust for linear relationship w/ PC2 and gene assignment rate
> mod = model.matrix(~Genotype+Age+totalAssignedGene, data=pd)
> 
> ###################
> # Gene DE, with SVA
> yGene = log2(geneRpkm+1)
> svaGene = sva(yGene, mod) 
Number of significant surrogate variables is:  4 
Iteration (out of 5 ):1  2  3  4  5  > modGene = cbind(mod, svaGene$sv)
> 
> fitGene = lmFit(yGene, modGene)
> ebGene = ebayes(fitGene)
> # take only homozygous DE, 3rd column of model matrix
> outGene = data.frame(Symbol = geneMap$Symbol, log2FC = fitGene$coef[,3],  
+                      pval = ebGene$p[,3], tval = ebGene$t[,3],
+                      meanRpkm = rowMeans(geneRpkm),Location=geneMap$coord)
> outGene = outGene[order(outGene$pval),]
> outGene$fdr = p.adjust(outGene$pval, "fdr")
> outGene$EntrezID = geneMap[rownames(outGene),c("EntrezID")]
> sigGene = outGene[outGene$pval < 0.01,]
> sum(sigGene$fdr<0.05) #219 genes FDR significant
[1] 219
> 
> #########################
> # exon DE, with SVA
> yExon = log2(exonRpkm+1)
> svaExon = sva(yExon, mod)
Number of significant surrogate variables is:  3 
Iteration (out of 5 ):1  2  3  4  5  > modExon = cbind(mod, svaExon$sv)
> 
> fitExon = lmFit(yExon, modExon)
> ebExon = ebayes(fitExon)
> outExon = data.frame(Symbol = exonMap$Symbol,GeneID = exonMap$Geneid,
+                      log2FC = fitExon$coef[,3], pval = ebExon$p[,3], tval = ebExon$t[,3],
+                      Location = exonMap$coord, meanRpkm = rowMeans(exonRpkm))
> outExon = outExon[order(outExon$pval),]
> outExon$fdr = p.adjust(outExon$pval, "fdr")
> outExon$EntrezID = exonMap[rownames(outExon),c("EntrezID")]
> sigExon = outExon[outExon$pval < 0.01,]
> sum(sigExon$fdr<0.05) #1 exon FDR significant
[1] 1
> 
> ######################
> ### junction RP10Ms
> txIDs = sapply(jMap$ensemblTx, paste, collapse=";")
> yJxn = as.matrix(log2(jRpkm+1))
> svaJxn = sva(yJxn, mod)
Number of significant surrogate variables is:  4 
Iteration (out of 5 ):1  2  3  4  5  > modJxn = cbind(mod, svaJxn$sv)
> 
> fitJxn = lmFit(yJxn, modJxn)
> ebJxn = ebayes(fitJxn)
> outJxn = data.frame(Symbol = jMap$newGeneSymbol,GeneID = jMap$newGeneID,
+                     log2FC = fitJxn$coef[,3], pval = ebJxn$p[,3], tval = ebJxn$t[,3],
+                     txCode = jMap$code,	meanRp10M = rowMeans(jRpkm),
+                     Location=ss(rownames(jRpkm),"\\("),TxIDs =txIDs)
> outJxn = outJxn[order(outJxn$pval),]
> outJxn$fdr = p.adjust(outJxn$pval, "fdr")
> outJxn$EntrezID = geneMap[as.character(outJxn$GeneID),c("EntrezID")]
> sigJxn = outJxn[outJxn$pval < 0.01,]
> sum(sigJxn$fdr<.05) #0 DE junctions
[1] 0
> 
> #####################
> # save everything! :)
> WriteXLS(list(Gene = sigGene,Exon= sigExon, Junction = sigJxn),
+          ExcelFileName = 'tables/pten_DE_table.xls')
> save(svaGene, svaExon, svaJxn, file="rdas/pten_sva_objects.rda")
> save(pd,outGene, outExon, outJxn, file="rdas/pten_DE_objects.rda")
> 
> 
> proc.time()
   user  system elapsed 
303.236   3.848 308.264 
