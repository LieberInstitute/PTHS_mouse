
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### Brady's pths mouse differential expression analysis using DESeq2
> # qsub -V -l mf=200G,h_vmem=250G,h_stack=256M -cwd -b y R CMD BATCH analyze_tcf4_mouse_deseq.R
> source('../DESeq2_functions.R') #work-horse of differential expression
> 
> ##############################################
> # load phenotype data and RPKM expression data
> load('./rdas/pheno.rda',envir = dat<-new.env())
> load('/dcl01/lieber/ajaffe/Brady/mouseRNAseq/rawCounts_tcf4_mouse_OCT20_n36.rda')
> pd = cbind(dat$pd,pd)
> all.equal(pd$FileID,pd$SAMPLE_ID) #samples line up
[1] TRUE
> 
> ##########################
> # conform to DESeq2 data types
> jCounts = as.matrix(as.data.frame(jCounts))
Loading required package: S4Vectors
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colnames, do.call,
    duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect,
    is.unsorted, lapply, lengths, Map, mapply, match, mget, order,
    paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind,
    Reduce, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unsplit, which, which.max, which.min


Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:base’:

    colMeans, colSums, expand.grid, rowMeans, rowSums

> jIndex=which(jMap$code != "Novel")
Loading required package: GenomicRanges
Loading required package: IRanges
Loading required package: GenomeInfoDb
> jCounts = jCounts[jIndex,]
> jMap = jMap[jIndex]
Loading required package: Biostrings
Loading required package: XVector
> colnames(jCounts) = pd$SAMPLE_ID
> rownames(pd) = pd$SAMPLE_ID
> 
> ##########################
> # remove outliers mouse 31
> pd = pd[-c(31),]
> geneCounts = geneCounts[,-c(31)]
> exonCounts = exonCounts[,-c(31)]
> jCounts = jCounts[,-c(31)]
> 
> ##############################
> # create and run DESeq objects
> geneDds <- DESeq2(countData = geneCounts, colData = pd, design = ~Genotype+Age,sva = TRUE,parallel=TRUE)
Creating DESeq object.
Estimating sample size factors.
Filtering genes.
Estimating surrogate variables.
Number of significant surrogate variables is:  10 
Iteration (out of 5 ):1  2  3  4  5  
Adding surrogate variables.
Finding differential expression.
using pre-existing size factors
estimating dispersions
gene-wise dispersion estimates: 24 workers
mean-dispersion relationship
final dispersion estimates, MLE betas: 24 workers
fitting model and testing: 24 workers
Finished.
> rm(geneCounts); gc()
           used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells  4558479 243.5    6861544  366.5   6861544  366.5
Vcells 64274877 490.4  190362779 1452.4 297230819 2267.7
> exonDds <- DESeq2(countData = exonCounts, colData = pd, design = ~Genotype+Age,sva = TRUE,parallel=TRUE)
Creating DESeq object.
Estimating sample size factors.
Filtering genes.
Estimating surrogate variables.
Number of significant surrogate variables is:  12 
Iteration (out of 5 ):1  2  3  4  5  
Adding surrogate variables.
Finding differential expression.
using pre-existing size factors
estimating dispersions
gene-wise dispersion estimates: 24 workers
mean-dispersion relationship
final dispersion estimates, MLE betas: 24 workers
fitting model and testing: 24 workers
Finished.
> rm(exonCounts); gc()
            used   (Mb) gc trigger   (Mb)   max used   (Mb)
Ncells   4693496  250.7    8273852  441.9    8273852  441.9
Vcells 135333926 1032.6  700095672 5341.4 1092384990 8334.3
> jxnDds <- DESeq2(countData = jCounts, colData = pd, design = ~Genotype+Age,sva = TRUE,parallel=TRUE)
Creating DESeq object.
converting counts to integer mode
Estimating sample size factors.
[1] "MY_ERROR:   Error in estimateSizeFactorsForMatrix(counts(object), locfunc = locfunc, : every gene contains at least one zero, cannot compute log geometric means\n"
converting counts to integer mode
Filtering genes.
Estimating surrogate variables.
Number of significant surrogate variables is:  2 
Iteration (out of 5 ):1  2  3  4  5  
Adding surrogate variables.
Finding differential expression.
using pre-existing size factors
estimating dispersions
gene-wise dispersion estimates: 24 workers
mean-dispersion relationship
final dispersion estimates, MLE betas: 24 workers
fitting model and testing: 24 workers
Finished.
> rm(jCounts); gc()
            used   (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells   4695235  250.8    9968622   532.4    9968622   532.4
Vcells 249083652 1900.4 1949491788 14873.5 2428723034 18529.7
> 
> ############################################
> # get DE results, and fold-change PTHS v. WT
> resGene <- results(geneDds,contrast = c('Genotype','HT','WT'),alpha=0.05) 
> resExon <- results(exonDds,contrast = c('Genotype','HT','WT'),alpha=0.05) 
> resJxn <- results(jxnDds,contrast = c('Genotype','HT','WT'),alpha=0.05) 
> 
> sum(resGene$padj < 0.05, na.rm=TRUE)
[1] 43
> sum(resExon$padj < 0.05, na.rm=TRUE)
[1] 101
> sum(resJxn$padj < 0.05, na.rm=TRUE)
[1] 5
> 
> outGene <- as.data.frame(resGene[order(resGene$padj,resGene$pvalue),])
> outGene = cbind(outGene,geneMap[rownames(outGene),])
> sigGene = outGene[which(outGene$pvalue<.01),]
> 
> outExon <- as.data.frame(resExon[order(resExon$padj,resExon$pvalue),])
> outExon = cbind(outExon,exonMap[rownames(outExon),])
> sigExon = outExon[which(outExon$pvalue<.01),]
> 
> outJxn <- as.data.frame(resJxn[order(resJxn$padj,resJxn$pvalue),])
> outJxn = cbind(outJxn, as.data.frame(jMap)[rownames(outJxn),])
> sigJxn = outJxn[which(outJxn$pvalue<.01),]
> 
> pdf('plots/DESeq2_MA_plots.pdf')
> plotMA(resGene, main="Gene MA plot", ylim=c(-.75,.75))
> plotMA(resExon, main="Exon MA plot", ylim=c(-.75,.75))
> plotMA(resJxn, main="Junction MA plot", ylim=c(-.75,.75))
> dev.off()
null device 
          1 
> 
> #################
> # save everything
> library(WriteXLS)
> WriteXLS(list(Gene = sigGene,Exon = sigExon,Junction = sigJxn), ExcelFileName = 'tables/mouse_tcf4_DE_table_DESeq2.xls',row.names=T)
> save(outGene,outExon,outJxn,file = 'rdas/mouse_tcf4_DE_objects_DESeq2.rda')
> save(geneDds,exonDds,jxnDds, file = '/dcl01/lieber/ajaffe/Brady/mouseRNAseq/mouse_tcf4_DESeq2_svaAdj.rda')
> 
> 
> proc.time()
    user   system  elapsed 
3137.345  162.720 4408.590 
